btnLogin.setOnAction(actionEvent -> {
            String email = txtEmail.getText();
            String psw = txtPassword.getText();

            // TODO: Controllare e-mail e password da file!
            if (email.equals("admin") && psw.equals("admin")) {

                // // Creazione finestra di selezionamento del servizio
                MyBorderPane rootSelezionamento = setWindow(primaryStage, "Selezione del servizio", 500, 500);

                // Creazione gridPane Selezionamento
                final GridPane gridPaneSelezionamento = new GridPane();

                // top, right, bottom, and left padding around the region's content
                gridPaneSelezionamento.setPadding(new Insets(100,50,20,70));

                // Spaziatura interlinea
                gridPaneSelezionamento.setHgap(25);
                gridPaneSelezionamento.setVgap(25);

                // Bottoni di selezione
                Button btnInserimento = new Button("INSERIMENTO DATI LAVORATORI");
                btnInserimento.setMaxHeight(Double.MAX_VALUE);
                btnInserimento.setMaxWidth(Double.MAX_VALUE);
                btnInserimento.setStyle("""
                    -fx-font-size: 13pt;
                """);

                // Click Inserimento dati lavoratori
                btnInserimento.setOnAction(actionEvent1 -> {

                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                    // Creazione finestra dell'inserimento dei dati del lavoratore
                    MyBorderPane rootInserimento = setWindow(primaryStage, "Inserimento dati lavoratore", 900, 700);
                    primaryStage.setX(500);
                    primaryStage.setY(50);


                    // Creazione gridPane Inserimento
                    final GridPane gridPaneInserimento = new GridPane();

                    // top, right, bottom, and left padding around the region's content
                    gridPaneInserimento.setPadding(new Insets(20,20,20,20));

                    // Spaziatura interlinea
                    gridPaneInserimento.setHgap(10);
                    gridPaneInserimento.setVgap(10);

                    // Vari testi indicativi
                    final Label lblNome = new Label("Nome");
                    final Label lblCognome = new Label("Cognome");
                    final Label lblLuogo = new Label("Luogo di nascita");
                    final Label lblData = new Label("Data di nascita");
                    final Label lblNazionalita = new Label("Nazionalità");
                    final Label lblIndirizzo = new Label("Indirizzo");
                    final Label lblTelefono = new Label("Telefono");
                    final Label lblEmailInsert = new Label("Email");
                    final Label lblEsperienzePrec = new Label("Specializzazioni/Esperienze prec.");
                    final Label lblLingue = new Label("Lingue parlate");
                    final Label lblPatente = new Label("Tipo patente");
                    final Label lblAutomunito = new Label("Automunito?");
                    final Label lblPeriodo = new Label("Periodo/i");
                    final Label lblZona = new Label("Zona/e");
                    // Vari testi d'errore eventuali
                    Label lblErroreNomeCognome = new Label();

                    // Vari campi testo
                    final TextField txtNome = new TextField();
                    final TextField txtCognome = new TextField();
                    final TextField txtLuogo = new TextField();
                    final TextField txtData = new TextField();

                    MenuButton menuButtonNazionalita = new MenuButton("Nazionalità");
                    menuButtonNazionalita.setMaxHeight(Double.MAX_VALUE);
                    menuButtonNazionalita.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemNazionalita = new RadioMenuItem[196];

                    final TextField txtIndirizzo = new TextField();
                    final TextField txtTelefono = new TextField();
                    final TextField txtEmailInsert = new TextField();

                    MenuButton menuButtonEsperienzePrec = new MenuButton("Esperienze");
                    menuButtonEsperienzePrec.setMaxHeight(Double.MAX_VALUE);
                    menuButtonEsperienzePrec.setMaxWidth(Double.MAX_VALUE);
                    CheckMenuItem[] checkMenuEsperienzePrec = new CheckMenuItem[5];

                    MenuButton menuButtonLingue = new MenuButton("Lingue");
                    menuButtonLingue.setMaxHeight(Double.MAX_VALUE);
                    menuButtonLingue.setMaxWidth(Double.MAX_VALUE);
                    CheckMenuItem[] checkMenuItemLingue = new CheckMenuItem[176];

                    MenuButton menuButtonPatenti = new MenuButton("Patenti");
                    menuButtonPatenti.setMaxHeight(Double.MAX_VALUE);
                    menuButtonPatenti.setMaxWidth(Double.MAX_VALUE);
                    CheckMenuItem[] checkMenuItemPatenti = new CheckMenuItem[19];

                    MenuButton menuButtonAutomunito = new MenuButton("Automunito?");
                    menuButtonAutomunito.setMaxHeight(Double.MAX_VALUE);
                    menuButtonAutomunito.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemAutomunito = new RadioMenuItem[2];

                    /* Primo range date
                    final TextField txtInizio1Giorno = new TextField();
                    txtInizio1Giorno.setPromptText("Giorno inizio");
                    final TextField txtInizio1Mese = new TextField();
                    txtInizio1Mese.setPromptText("Mese inizio");
                    final TextField txtInizio1Anno = new TextField();
                    txtInizio1Anno.setPromptText("Anno inizio");
                    final TextField txtFine1Giorno = new TextField();
                    txtFine1Giorno.setPromptText("Giorno fine");
                    final TextField txtFine1Mese = new TextField();
                    txtFine1Mese.setPromptText("Mese fine");
                    final TextField txtFine1Anno = new TextField();
                    txtFine1Anno.setPromptText("Anno fine");  */
                    DatePicker datePickerInizio1 = new DatePicker();
                    DatePicker datePickerFine1 = new DatePicker();
                    datePickerInizio1.setShowWeekNumbers(false);
                    datePickerInizio1.setPromptText("Data d'inizio");
                    datePickerFine1.setShowWeekNumbers(false);
                    datePickerFine1.setPromptText("Data di fine");

                    /* Secondo range date
                    final TextField txtInizio2Giorno = new TextField();
                    txtInizio2Giorno.setPromptText("Giorno inizio");
                    final TextField txtInizio2Mese = new TextField();
                    txtInizio2Mese.setPromptText("Mese inizio");
                    final TextField txtInizio2Anno = new TextField();
                    txtInizio2Anno.setPromptText("Anno inizio");
                    final TextField txtFine2Giorno = new TextField();
                    txtFine2Giorno.setPromptText("Giorno fine");
                    final TextField txtFine2Mese = new TextField();
                    txtFine2Mese.setPromptText("Mese fine");
                    final TextField txtFine2Anno = new TextField();
                    txtFine2Anno.setPromptText("Anno fine"); */
                    DatePicker datePickerInizio2 = new DatePicker();
                    DatePicker datePickerFine2 = new DatePicker();
                    datePickerInizio2.setShowWeekNumbers(false);
                    datePickerInizio2.setPromptText("Data d'inizio");
                    datePickerFine2.setShowWeekNumbers(false);
                    datePickerFine2.setPromptText("Data di fine");

                    /* Terzo range date
                    final TextField txtInizio3Giorno = new TextField();
                    txtInizio3Giorno.setPromptText("Giorno inizio");
                    final TextField txtInizio3Mese = new TextField();
                    txtInizio3Mese.setPromptText("Mese inizio");
                    final TextField txtInizio3Anno = new TextField();
                    txtInizio3Anno.setPromptText("Anno inizio");
                    final TextField txtFine3Giorno = new TextField();
                    txtFine3Giorno.setPromptText("Giorno fine");
                    final TextField txtFine3Mese = new TextField();
                    txtFine3Mese.setPromptText("Mese fine");
                    final TextField txtFine3Anno = new TextField();
                    txtFine3Anno.setPromptText("Anno fine"); */
                    DatePicker datePickerInizio3 = new DatePicker();
                    DatePicker datePickerFine3 = new DatePicker();
                    datePickerInizio3.setShowWeekNumbers(false);
                    datePickerInizio3.setPromptText("Data d'inizio");
                    datePickerFine3.setShowWeekNumbers(false);
                    datePickerFine3.setPromptText("Data di fine");

                    /* Quarta range date
                    final TextField txtInizio4Giorno = new TextField();
                    txtInizio4Giorno.setPromptText("Giorno inizio");
                    final TextField txtInizio4Mese = new TextField();
                    txtInizio4Mese.setPromptText("Mese inizio");
                    final TextField txtInizio4Anno = new TextField();
                    txtInizio4Anno.setPromptText("Anno inizio");
                    final TextField txtFine4Giorno = new TextField();
                    txtFine4Giorno.setPromptText("Giorno fine");
                    final TextField txtFine4Mese = new TextField();
                    txtFine4Mese.setPromptText("Mese fine");
                    final TextField txtFine4Anno = new TextField();
                    txtFine4Anno.setPromptText("Anno fine"); */
                    DatePicker datePickerInizio4 = new DatePicker();
                    DatePicker datePickerFine4 = new DatePicker();
                    datePickerInizio4.setShowWeekNumbers(false);
                    datePickerInizio4.setPromptText("Data d'inizio");
                    datePickerFine4.setShowWeekNumbers(false);
                    datePickerFine4.setPromptText("Data di fine");

                    MenuButton menuButtonZone = new MenuButton("Zona/e");
                    menuButtonZone.setMaxHeight(Double.MAX_VALUE);
                    menuButtonZone.setMaxWidth(Double.MAX_VALUE);
                    CheckMenuItem[] checkMenuItemZone = new CheckMenuItem[98];

                    // Creazione bottone save
                    Button btnSave = new Button("SALVA");
                    btnSave.setMaxHeight(Double.MAX_VALUE);
                    btnSave.setMaxWidth(Double.MAX_VALUE);
                    btnSave.setOnAction(actionEvent2 -> {
                        // Controllo che tutti i campi siano riempiti,
                        // Eccetto: telefono, esperienzePrec
                        boolean risultatoNome = false;
                        boolean risultatoCognome = false;
                        boolean risultatoLuogo = false;
                        /*
                        boolean risultatoData = false;
                        boolean risultatoNazionalita = false;
                        boolean risultatoIndirizzo = false;
                        boolean risultatoTelefono = false;
                        boolean risultatoEmailInsert = false;
                        boolean risultatoEsperienzePrec = false;
                        boolean risultatoLingue = false;
                        boolean risultatoPatente = false;
                        boolean risultatoAutomunito = false;
                        boolean risultatoPeriodo = false;
                        boolean risultatoZona = false;
                        boolean risultatoDisponibilita = false;
                        */

                        String regex = "^[A-Za-z]$";
                        //String regex = "^[0-9]+$";
                        // Compile the ReGex
                        Pattern p = Pattern.compile(regex);

                        /**
                         * CONTROLLO DEL NOME
                         **/
                        // Regex per verificare il Nome.
                        if (txtNome.getText().isEmpty())
                            risultatoNome = true;
                        else {
                            // Pattern class contains matcher() method
                            // to find matching between given Nome
                            // and regular expression.
                            Matcher m = p.matcher(txtNome.getText());
                            // Verifica del risultato del match
                            if (! m.matches())
                                risultatoNome = true;
                        }

                        /**
                         * CONTROLLO DEL COGNOME
                         **/
                        // Regex per verificare il Cognome.
                        if (txtCognome.getText().isEmpty())
                            risultatoCognome = true;
                        else {
                            Matcher m = p.matcher(txtCognome.getText());
                            if (! m.matches())
                                risultatoCognome = true;
                        }

                        /**
                         * CONTROLLO DEL LUOGO
                         **/
                        // Regex per verificare il Luogo.
                        if (txtLuogo.getText().isEmpty())
                            risultatoLuogo = true;
                        else {
                            Matcher m = p.matcher(txtLuogo.getText());
                            if (! m.matches())
                                risultatoLuogo = true;
                        }

                        /**
                         * CONTROLLO DELLA DATA
                         **/
                        if (risultatoNome) {
                            lblErroreNomeCognome.setText("ERRORE!"); // TODO: inserire errore di MAX
                            lblErroreNomeCognome.setVisible(true);
                        }

                    });

                    // Aggiunta testi al layout
                    gridPaneInserimento.addColumn(0, lblNome, lblCognome, lblLuogo, lblData, lblNazionalita,
                            lblIndirizzo, lblTelefono, lblEmailInsert, lblEsperienzePrec,
                            lblLingue, lblPatente, lblAutomunito, lblPeriodo);
                    gridPaneInserimento.add(lblZona, 0, 16);

                    // Aggiunta campi testo e tendine al layout
                    gridPaneInserimento.addColumn(1, txtNome, txtCognome, txtLuogo, txtData, menuButtonNazionalita,
                            txtIndirizzo, txtTelefono, txtEmailInsert, menuButtonEsperienzePrec,
                            menuButtonLingue, menuButtonPatenti, menuButtonAutomunito, datePickerInizio1, datePickerInizio2, datePickerInizio3, datePickerInizio4, menuButtonZone);

                    // Aggiunta campi Periodo al layout
                    /* Primo range
                    gridPaneInserimento.add(new Label("/"), 2, 12);
                    gridPaneInserimento.add(txtInizio1Mese, 3, 12);
                    gridPaneInserimento.add(new Label("/"), 4, 12);
                    gridPaneInserimento.add(txtInizio1Anno, 5, 12);
                    gridPaneInserimento.add(new Label("-"), 6, 12);
                    gridPaneInserimento.add(txtFine1Giorno, 7, 12);
                    gridPaneInserimento.add(new Label("/"), 8, 12);
                    gridPaneInserimento.add(txtFine1Mese, 9, 12);
                    gridPaneInserimento.add(new Label("/"), 10, 12);
                    gridPaneInserimento.add(txtFine1Anno, 11, 12);*/
                    gridPaneInserimento.add(datePickerFine1, 2, 12);

                    /* Secondo range
                    gridPaneInserimento.add(new Label("/"), 2, 13);
                    gridPaneInserimento.add(txtInizio2Mese, 3, 13);
                    gridPaneInserimento.add(new Label("/"), 4, 13);
                    gridPaneInserimento.add(txtInizio2Anno, 5, 13);
                    gridPaneInserimento.add(new Label("-"), 6, 13);
                    gridPaneInserimento.add(txtFine2Giorno, 7, 13);
                    gridPaneInserimento.add(new Label("/"), 8, 13);
                    gridPaneInserimento.add(txtFine2Mese, 9, 13);
                    gridPaneInserimento.add(new Label("/"), 10, 13);
                    gridPaneInserimento.add(txtFine2Anno, 11, 13); */
                    gridPaneInserimento.add(datePickerFine2, 2, 13);

                    /* Terzo range
                    gridPaneInserimento.add(new Label("/"), 2, 14);
                    gridPaneInserimento.add(txtInizio3Mese, 3, 14);
                    gridPaneInserimento.add(new Label("/"), 4, 14);
                    gridPaneInserimento.add(txtInizio3Anno, 5, 14);
                    gridPaneInserimento.add(new Label("-"), 6, 14);
                    gridPaneInserimento.add(txtFine3Giorno, 7, 14);
                    gridPaneInserimento.add(new Label("/"), 8, 14);
                    gridPaneInserimento.add(txtFine3Mese, 9, 14);
                    gridPaneInserimento.add(new Label("/"), 10, 14);
                    gridPaneInserimento.add(txtFine3Anno, 11, 14); */
                    gridPaneInserimento.add(datePickerFine3, 2, 14);

                    /* Quarto range
                    gridPaneInserimento.add(new Label("/"), 2, 15);
                    gridPaneInserimento.add(txtInizio4Mese, 3, 15);
                    gridPaneInserimento.add(new Label("/"), 4, 15);
                    gridPaneInserimento.add(txtInizio4Anno, 5, 15);
                    gridPaneInserimento.add(new Label("-"), 6, 15);
                    gridPaneInserimento.add(txtFine4Giorno, 7, 15);
                    gridPaneInserimento.add(new Label("/"), 8, 15);
                    gridPaneInserimento.add(txtFine4Mese, 9, 15);
                    gridPaneInserimento.add(new Label("/"), 10, 15);
                    gridPaneInserimento.add(txtFine4Anno, 11, 15);*/
                    gridPaneInserimento.add(datePickerFine4, 2, 15);

                    // Aggiunta errori al layout
                    gridPaneInserimento.add(lblErroreNomeCognome, 3, 0);
                    lblErroreNomeCognome.setStyle("""
                        -fx-text-fill: red;
                        -fx-font-weight: bold;
                    """);
                    lblErroreNomeCognome.setVisible(false);

                    // Aggiunta bottone save al layout
                    gridPaneInserimento.add(btnSave, 0, 17, 3,1);

                    // Analisi di un file txt dentro una classe costruttore Scanner
                    try {
                        String pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\comuni.txt";
                        Scanner scanComuni = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\nazioni.txt";
                        Scanner scanNazioni = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\nazionalita.txt";
                        Scanner scanNazionalita = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\patenti.txt";
                        Scanner scanPatenti = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\lavori_precedenti.txt";
                        Scanner scanEsperienzePrec = new Scanner(new File(pathAttuale));
                        // Array contenenti i comuni e le nazionalita
                        String[] zoneComuni = new String[98];
                        String[] nazioni = new String[196];
                        String[] nazionalita = new String[176];
                        String[] patenti = new String[19];
                        String[] esperienzePrec = new String[5];

                        // Impostato il delimitatore per cercare gli elementi
                        scanComuni.useDelimiter(",");
                        scanNazioni.useDelimiter(",");
                        scanNazionalita.useDelimiter(",");
                        scanPatenti.useDelimiter(",");
                        scanEsperienzePrec.useDelimiter(",");

                        // Finché esiste un elemento nel file dei comuni
                        for (int j = 0; scanComuni.hasNext(); j ++)
                            zoneComuni[j] = scanComuni.next();

                        // Finché esiste un elemento nel file delle nazioni
                        for (int j = 0; scanNazioni.hasNext(); j ++)
                            nazioni[j] = scanNazioni.next();

                        // Finché esiste un elemento nel file delle nazionalita
                        for (int j = 0; scanNazionalita.hasNext(); j ++)
                            nazionalita[j] = scanNazionalita.next();

                        // Finché esiste un elemento nel file delle patenti
                        for (int j = 0; scanPatenti.hasNext(); j ++)
                            patenti[j] = scanPatenti.next();

                        // Finché esiste un elemento nel file delle esperienze precedenti
                        for (int j = 0; scanEsperienzePrec.hasNext(); j ++)
                            esperienzePrec[j] = scanEsperienzePrec.next();


                        // Creazione tendina zone (comuni)
                        for (int i = 0; i < zoneComuni.length - 1; i ++) {
                            // Crea oggetto
                            checkMenuItemZone[i] = new CheckMenuItem(zoneComuni[i]);

                            //int index = i;
                            // Per controllare ogni voce quando viene cliccata
                            //checkMenuItemZone[i].setOnAction(event-> {
                                //System.out.println("Seleziona l'elemento e controllalo!!!");
                                //System.out.println("È stato selezionato " + checkMenuItem[index].getText() + " ? " + checkMenuItem[index].isSelected());
                            //});

                            // Aggiunge elemento al menu
                            menuButtonZone.getItems().add(checkMenuItemZone[i]);
                        }

                        // Creazione tendina nazioni (nazionalità del dipendete)
                        ToggleGroup toggleGroupNazioni = new ToggleGroup();
                        for (int i = 0; i < nazioni.length - 1; i ++) {
                            // Crea oggetto
                            radioMenuItemNazionalita[i] = new RadioMenuItem(nazioni[i]);
                            toggleGroupNazioni.getToggles().add(radioMenuItemNazionalita[i]);

                            // Aggiunge elemento al menu
                            menuButtonNazionalita.getItems().add(radioMenuItemNazionalita[i]);
                        }

                        // Creazione tendina lingue
                        for (int i = 0; i < nazionalita.length - 1; i ++) {
                            // Crea oggetto
                            checkMenuItemLingue[i] = new CheckMenuItem(nazionalita[i]);
                            // Aggiunge elemento al menu
                            menuButtonLingue.getItems().add(checkMenuItemLingue[i]);
                        }

                        // Creazione tendina patenti
                        for (int i = 0; i < patenti.length - 1; i ++) {
                            // Crea oggetto
                            checkMenuItemPatenti[i] = new CheckMenuItem(patenti[i]);
                            // Aggiunge elemento al menu
                            menuButtonPatenti.getItems().add(checkMenuItemPatenti[i]);
                        }

                        // Creazione tendina esperienze precedenti
                        for (int i = 0; i < esperienzePrec.length - 1; i ++) {
                            // Crea oggetto
                            checkMenuEsperienzePrec[i] = new CheckMenuItem(esperienzePrec[i]);
                            // Aggiunge elemento al menu
                            menuButtonEsperienzePrec.getItems().add(checkMenuEsperienzePrec[i]);
                        }

                        // Creazione tendina automunito
                        ToggleGroup toggleGroupAutomunito = new ToggleGroup();
                        radioMenuItemAutomunito[0] = new RadioMenuItem("Sì");
                        toggleGroupAutomunito.getToggles().add(radioMenuItemAutomunito[0]);
                        menuButtonAutomunito.getItems().add(radioMenuItemAutomunito[0]);
                        radioMenuItemAutomunito[1] = new RadioMenuItem("No");
                        toggleGroupAutomunito.getToggles().add(radioMenuItemAutomunito[1]);
                        menuButtonAutomunito.getItems().add(radioMenuItemAutomunito[1]);

                    } catch (FileNotFoundException e) {
                        throw new RuntimeException(e);
                    }

                    rootInserimento.setTop(gridPaneInserimento);
                });

                Button btnAnagrafica = new Button("RICERCA E AGGIORNAMENTO ANAGRAFICHE");
                btnAnagrafica.setMaxHeight(Double.MAX_VALUE);
                btnAnagrafica.setMaxWidth(Double.MAX_VALUE);
                btnAnagrafica.setStyle("""
                    -fx-font-size: 13pt;
                """);

                // Click Ricerche e anagrafiche
                btnAnagrafica.setOnAction(actionEvent1 -> {

                    // Creazione finestra della ricerca dell'anagrafica
                    MyBorderPane rootAnagrafica = setWindow(primaryStage, "Ricerca anagrafiche", 1300, 700);
                    primaryStage.setX(400);
                    primaryStage.setY(50);

                    // Creazione gridPane ricerca anagrafica
                    final GridPane gridPaneAnagrafica = new GridPane();

                    // top, right, bottom, and left padding around the region's content
                    gridPaneAnagrafica.setPadding(new Insets(20,20,20,20));

                    // Spaziatura interlinea
                    gridPaneAnagrafica.setHgap(10);
                    gridPaneAnagrafica.setVgap(10);
~
                    // Creazione bottoni NONE, AND e OR
                    RadioButton radioButtonNone1 = new RadioButton("NONE");
                    RadioButton radioButtonNone2 = new RadioButton("NONE");
                    RadioButton radioButtonNone3 = new RadioButton("NONE");
                    RadioButton radioButtonNone4 = new RadioButton("NONE");
                    RadioButton radioButtonNone5 = new RadioButton("NONE");
                    RadioButton radioButtonNone6 = new RadioButton("NONE");
                    RadioButton radioButtonNone7 = new RadioButton("NONE");
                    RadioButton radioButtonAnd1 = new RadioButton("AND");
                    RadioButton radioButtonAnd2 = new RadioButton("AND");
                    RadioButton radioButtonAnd3 = new RadioButton("AND");
                    RadioButton radioButtonAnd4 = new RadioButton("AND");
                    RadioButton radioButtonAnd5 = new RadioButton("AND");
                    RadioButton radioButtonAnd6 = new RadioButton("AND");
                    RadioButton radioButtonAnd7 = new RadioButton("AND");
                    RadioButton radioButtonOr1 = new RadioButton("OR");
                    RadioButton radioButtonOr2 = new RadioButton("OR");
                    RadioButton radioButtonOr3 = new RadioButton("OR");
                    RadioButton radioButtonOr4 = new RadioButton("OR");
                    RadioButton radioButtonOr5 = new RadioButton("OR");
                    RadioButton radioButtonOr6 = new RadioButton("OR");
                    RadioButton radioButtonOr7 = new RadioButton("OR");
                    ToggleGroup radioGroup1 = new ToggleGroup();
                    ToggleGroup radioGroup2 = new ToggleGroup();
                    ToggleGroup radioGroup3 = new ToggleGroup();
                    ToggleGroup radioGroup4 = new ToggleGroup();
                    ToggleGroup radioGroup5 = new ToggleGroup();
                    ToggleGroup radioGroup6 = new ToggleGroup();
                    ToggleGroup radioGroup7 = new ToggleGroup();
                    radioButtonNone1.setToggleGroup(radioGroup1);
                    radioButtonNone2.setToggleGroup(radioGroup2);
                    radioButtonNone3.setToggleGroup(radioGroup3);
                    radioButtonNone4.setToggleGroup(radioGroup4);
                    radioButtonNone5.setToggleGroup(radioGroup5);
                    radioButtonNone6.setToggleGroup(radioGroup6);
                    radioButtonNone7.setToggleGroup(radioGroup7);
                    radioButtonAnd1.setToggleGroup(radioGroup1);
                    radioButtonAnd2.setToggleGroup(radioGroup2);
                    radioButtonAnd3.setToggleGroup(radioGroup3);
                    radioButtonAnd4.setToggleGroup(radioGroup4);
                    radioButtonAnd5.setToggleGroup(radioGroup5);
                    radioButtonAnd6.setToggleGroup(radioGroup6);
                    radioButtonAnd7.setToggleGroup(radioGroup7);
                    radioButtonOr1.setToggleGroup(radioGroup1);
                    radioButtonOr2.setToggleGroup(radioGroup2);
                    radioButtonOr3.setToggleGroup(radioGroup3);
                    radioButtonOr4.setToggleGroup(radioGroup4);
                    radioButtonOr5.setToggleGroup(radioGroup5);
                    radioButtonOr6.setToggleGroup(radioGroup6);
                    radioButtonOr7.setToggleGroup(radioGroup7);
                    // Imposto di default i bottoni
                    radioButtonNone1.fire();
                    radioButtonNone2.fire();
                    radioButtonNone3.fire();
                    radioButtonNone4.fire();
                    radioButtonNone5.fire();
                    radioButtonNone6.fire();
                    radioButtonNone7.fire();

                    final TextField txtNomeLavoratore = new TextField();
                    txtNomeLavoratore.setPromptText("Nome");
                    final TextField txtCognomeLavoratore = new TextField();
                    txtCognomeLavoratore.setPromptText("Cognome");
                    MenuButton menuButtonLingue = new MenuButton("Lingua parlata");
                    menuButtonLingue.setMaxHeight(Double.MAX_VALUE);
                    menuButtonLingue.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemLingue = new RadioMenuItem[176];

                    DatePicker datePickerInizio = new DatePicker();
                    DatePicker datePickerFine= new DatePicker();
                    datePickerInizio.setShowWeekNumbers(false);
                    datePickerInizio.setPromptText("Data d'inizio");
                    datePickerFine.setShowWeekNumbers(false);
                    datePickerFine.setPromptText("Data di fine");

                    MenuButton menuButtonEsperienzePrec = new MenuButton("Esperienza");
                    menuButtonEsperienzePrec.setMaxHeight(Double.MAX_VALUE);
                    menuButtonEsperienzePrec.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuEsperienzePrec = new RadioMenuItem[5];

                    MenuButton menuButtonZone = new MenuButton("Comune di Residenza");
                    menuButtonZone.setMaxHeight(Double.MAX_VALUE);
                    menuButtonZone.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemResidenza = new RadioMenuItem[98];

                    MenuButton menuButtonPatenti = new MenuButton("Patente");
                    menuButtonPatenti.setMaxHeight(Double.MAX_VALUE);
                    menuButtonPatenti.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemPatenti = new RadioMenuItem[19];

                    MenuButton menuButtonAutomunito = new MenuButton("Automunito?");
                    menuButtonAutomunito.setMaxHeight(Double.MAX_VALUE);
                    menuButtonAutomunito.setMaxWidth(Double.MAX_VALUE);
                    RadioMenuItem[] radioMenuItemAutomunito = new RadioMenuItem[2];

                    // Creazione bottone save
                    Button btnRicerca = new Button("CERCA");
                    btnRicerca.setMaxHeight(Double.MAX_VALUE);
                    btnRicerca.setMaxWidth(Double.MAX_VALUE);

                    try {
                        String pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\comuni.txt";
                        Scanner scanComuni = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\nazionalita.txt";
                        Scanner scanNazionalita = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\patenti.txt";
                        Scanner scanPatenti = new Scanner(new File(pathAttuale));
                        pathAttuale = System.getProperty("user.dir") + "\\src\\main\\resources\\com\\univr\\it\\exe01\\lavori_precedenti.txt";
                        Scanner scanEsperienzePrec = new Scanner(new File(pathAttuale));
                        // Array contenenti i comuni e le nazionalita
                        String[] zoneComuni = new String[98];
                        String[] nazioni = new String[196];
                        String[] nazionalita = new String[176];
                        String[] patenti = new String[19];
                        String[] esperienzePrec = new String[5];

                        // Impostato il delimitatore per cercare gli elementi
                        scanComuni.useDelimiter(",");
                        scanNazionalita.useDelimiter(",");
                        scanPatenti.useDelimiter(",");
                        scanEsperienzePrec.useDelimiter(",");

                        // Finché esiste un elemento nel file dei comuni
                        for (int j = 0; scanComuni.hasNext(); j ++)
                            zoneComuni[j] = scanComuni.next();

                        // Finché esiste un elemento nel file delle nazionalita
                        for (int j = 0; scanNazionalita.hasNext(); j ++)
                            nazionalita[j] = scanNazionalita.next();

                        // Finché esiste un elemento nel file delle patenti
                        for (int j = 0; scanPatenti.hasNext(); j ++)
                            patenti[j] = scanPatenti.next();

                        // Finché esiste un elemento nel file delle esperienze precedenti
                        for (int j = 0; scanEsperienzePrec.hasNext(); j ++)
                            esperienzePrec[j] = scanEsperienzePrec.next();


                        // Creazione tendina zone (comuni)
                        ToggleGroup toggleGroupResidenza = new ToggleGroup();
                        for (int i = 0; i < zoneComuni.length - 1; i ++) {
                            // Crea oggetto
                            radioMenuItemResidenza[i] = new RadioMenuItem(zoneComuni[i]);

                            //int index = i;
                            // Per controllare ogni voce quando viene cliccata
                            //checkMenuItemZone[i].setOnAction(event-> {
                            //System.out.println("Seleziona l'elemento e controllalo!!!");
                            //System.out.println("È stato selezionato " + checkMenuItem[index].getText() + " ? " + checkMenuItem[index].isSelected());
                            //});

                            // Aggiunge elemento al menu
                            toggleGroupResidenza.getToggles().add(radioMenuItemResidenza[i]);
                            menuButtonZone.getItems().add(radioMenuItemResidenza[i]);
                        }

                        // Creazione tendina lingue
                        ToggleGroup toggleGroupLingue = new ToggleGroup();
                        for (int i = 0; i < nazionalita.length - 1; i ++) {
                            // Crea oggetto
                            radioMenuItemLingue[i] = new RadioMenuItem(nazionalita[i]);
                            // Aggiunge elemento al menu
                            toggleGroupLingue.getToggles().add(radioMenuItemLingue[i]);
                            menuButtonLingue.getItems().add(radioMenuItemLingue[i]);
                        }

                        // Creazione tendina patenti
                        ToggleGroup toggleGroupPatenti = new ToggleGroup();
                        for (int i = 0; i < patenti.length - 1; i ++) {
                            // Crea oggetto
                            radioMenuItemPatenti[i] = new RadioMenuItem(patenti[i]);
                            // Aggiunge elemento al menu
                            toggleGroupPatenti.getToggles().add(radioMenuItemPatenti[i]);
                            menuButtonPatenti.getItems().add(radioMenuItemPatenti[i]);
                        }

                        // Creazione tendina esperienze precedenti
                        ToggleGroup toggleGroupEsperienzePrec = new ToggleGroup();
                        for (int i = 0; i < esperienzePrec.length - 1; i ++) {
                            // Crea oggetto
                            radioMenuEsperienzePrec[i] = new RadioMenuItem(esperienzePrec[i]);
                            // Aggiunge elemento al menu
                            toggleGroupEsperienzePrec.getToggles().add(radioMenuEsperienzePrec[i]);
                            menuButtonEsperienzePrec.getItems().add(radioMenuEsperienzePrec[i]);
                        }

                        // Creazione tendina automunito
                        ToggleGroup toggleGroupAutomunito = new ToggleGroup();
                        radioMenuItemAutomunito[0] = new RadioMenuItem("Sì");
                        toggleGroupAutomunito.getToggles().add(radioMenuItemAutomunito[0]);
                        menuButtonAutomunito.getItems().add(radioMenuItemAutomunito[0]);
                        radioMenuItemAutomunito[1] = new RadioMenuItem("No");
                        toggleGroupAutomunito.getToggles().add(radioMenuItemAutomunito[1]);
                        menuButtonAutomunito.getItems().add(radioMenuItemAutomunito[1]);

                    } catch (FileNotFoundException e) {
                        throw new RuntimeException(e);
                    }

                    // Aggiunta bottoni al layout
                    gridPaneAnagrafica.add(radioButtonNone1, 0, 1);
                    gridPaneAnagrafica.add(radioButtonNone2, 0, 2);
                    gridPaneAnagrafica.add(radioButtonNone3, 0, 3);
                    gridPaneAnagrafica.add(radioButtonNone4, 0, 4);
                    gridPaneAnagrafica.add(radioButtonNone5, 0, 5);
                    gridPaneAnagrafica.add(radioButtonNone6, 0, 6);
                    gridPaneAnagrafica.add(radioButtonNone7, 0, 7);
                    gridPaneAnagrafica.add(radioButtonAnd1, 1, 1);
                    gridPaneAnagrafica.add(radioButtonAnd2, 1, 2);
                    gridPaneAnagrafica.add(radioButtonAnd3, 1, 3);
                    gridPaneAnagrafica.add(radioButtonAnd4, 1, 4);
                    gridPaneAnagrafica.add(radioButtonAnd5, 1, 5);
                    gridPaneAnagrafica.add(radioButtonAnd6, 1, 6);
                    gridPaneAnagrafica.add(radioButtonAnd7, 1, 7);
                    gridPaneAnagrafica.add(radioButtonOr1, 2, 1);
                    gridPaneAnagrafica.add(radioButtonOr2, 2, 2);
                    gridPaneAnagrafica.add(radioButtonOr3, 2, 3);
                    gridPaneAnagrafica.add(radioButtonOr4, 2, 4);
                    gridPaneAnagrafica.add(radioButtonOr5, 2, 5);
                    gridPaneAnagrafica.add(radioButtonOr6, 2, 6);
                    gridPaneAnagrafica.add(radioButtonOr7, 2, 7);

                    // Aggiunta campi testo e tendine al layout
                    gridPaneAnagrafica.addColumn(3, txtNomeLavoratore, txtCognomeLavoratore, menuButtonLingue, datePickerInizio, menuButtonEsperienzePrec,
                            menuButtonZone, menuButtonPatenti, menuButtonAutomunito);
                    gridPaneAnagrafica.add(datePickerFine, 4, 3);

                    // Aggiunta bottone ricerca
                    gridPaneAnagrafica.add(btnRicerca, 0, 8,5, 1);

                    rootAnagrafica.setTop(gridPaneAnagrafica);
                });


                // Aggiunta Nodes al GridPane layout
                gridPaneSelezionamento.add(btnInserimento, 0, 0);
                gridPaneSelezionamento.add(btnAnagrafica, 0, 1);

                rootSelezionamento.setCenter(gridPaneSelezionamento);
            }
            else {
                // In caso di errore di inserimento, messaggio di errore
                lblErroreLogin.setVisible(true);
            }
        });